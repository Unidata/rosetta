# Simple Log
# Version 2.0.1
# http://simple-log.dev.java.net

# $Id: simplelog-config.properties,v 1.2 2006/07/13 08:56:46 grlea Exp $

# Copyright (c) 2004-2006 Graham Lea. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


###################################################################################################
# Contents
#
# Log File Properties
#
#     simplelog.logFile
#     simplelog.logFile.interpretName
#     simplelog.logFile.append
#     simplelog.logFile.andConsole
#
# Configuration Management Properties
#
#     simplelog.reloading
#
# General Format Properties
#
#     simplelog.printStackTraces
#     simplelog.dateFormat
#
# Specific Format Properties
#
#     simplelog.format.debug
#     simplelog.format.debugObject
#     simplelog.format.debugException
#     simplelog.format.entry
#     simplelog.format.exit
#
#     simplelog.format.debug.instance
#     simplelog.format.debugObject.instance
#     simplelog.format.debugException.instance
#     simplelog.format.entry.instance
#     simplelog.format.exit.instance
#

###################################################################################################
# Log File Properties


# Send log output to a file (rather than to System.err): relative or absolute file name.
#
# If the interpretName property is true (default), the file name will be interpreted using a
# MessageFormat, with argument 0 being the current Date. This allows the date to be inserted into
# the file name using patterns like {0,date,yyyy_MM_dd} or {0,date,yyyy} and {0,date,MM}, etc.
# Note that the name will NOT be interpreted if log rolling is active.
#
# Relative paths are relative to the JVM's working directory.
# Non-existing directories are created.
# Output falls back to System.err if the file name can't be interpreted or the file can't be opened
# for writing.
#
# Default: <blank>

simplelog.logFile = pzhta.log



# Whether the logFile property should be interpreted using a MessageFormat: true or false
# See the description for simplelog.logFile above for more details.
#
# This property has no effect when log rolling is in use. The log file name will not be translated.
#
# Default: true

simplelog.logFile.interpretName = true



# When writing log output to a file, append to the file if it already exists: true or false
#
# This property has no effect when log rolling is in use. An existing file will always be appended.
#
# Default: true

simplelog.logFile.append = true



# Whether the logging output going to a file should also be output to the console: true or false
# Only applies when simplelog.logFile is assigned.
#
# Default: false

simplelog.logFile.andConsole = false



###################################################################################################
# Configuration Management Properties


# Reload the properties if they change: true or false
#
# Default: false

simplelog.reloading = false



###################################################################################################
# General Format Properties


# Whether the exception message should print a stack trace: true or false
#
# Default: true

simplelog.printStackTraces = true



# Date format for ALL message formats: see java.text.SimpleDateFormat
#
# Default: EEE yyyy/MM/dd HH:mm:ss.SSS

#simplelog.dateFormat = EEE yyyy/MM/dd HH:mm:ss.SSS



###################################################################################################
# Specific Format Properties


# Message formats for each type of logging: see java.text.MessageFormat
# Note there is a different format for SimpleLoggers created on a per-instance basis
#
# The common message arguments are:
#
# {0} = Current date/time (java.util.Date)
# {1} = Thread name (String)
# {2} = Class name (String)
# {3} = Instance ID (Object)
# {4} = Debug level (DebugLevel)
#
# The uncommon message arguments are:
#
# debug:          {5} = message
# debugObject:    {5} = object name, {6} = object value
# debugException: {5} = exception
# entry:          {5} = method name
# exit:           {5} = method name

#simplelog.format.debug =           {0}|   |{1}|{2}|{5}
#simplelog.format.debugObject =     {0}|---|{1}|{2}|{5}|{6}
#simplelog.format.debugException =  {0}|***|{1}|{2}|{5}
#simplelog.format.entry =           {0}|>>>|{1}|{2}|{5}
#simplelog.format.exit =            {0}|<<<|{1}|{2}|{5}

#simplelog.format.debug.instance =           {0}|   |{1}|{2}[{3}]|{5}
#simplelog.format.debugObject.instance =     {0}|---|{1}|{2}[{3}]|{5}|{6}
#simplelog.format.debugException.instance =  {0}|***|{1}|{2}[{3}]|{5}
#simplelog.format.entry.instance =           {0}|>>>|{1}|{2}[{3}]|{5}
#simplelog.format.exit.instance =            {0}|<<<|{1}|{2}[{3}]|{5}

