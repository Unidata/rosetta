plugins {
  id 'war'
  id 'java-library'
  id 'jacoco'
  id 'org.gretty' version '3.0.4'
  id 'com.diffplug.spotless' version '5.11.1'
  id 'edu.ucar.unidata.site.jekyll' version '0.0.3'
  id 'edu.ucar.unidata.nexus' version '0.0.1'
  id 'org.owasp.dependencycheck' version '6.5.0.1'
}

repositories {
  maven {
    url 'https://artifacts.unidata.ucar.edu/repository/unidata-all/'
  }
  maven {
    url 'https://artifacts.unidata.ucar.edu/repository/unidata-snapshots/'
  }
}

import org.apache.commons.io.FileUtils

compileJava {
  options.compilerArgs << '-Xlint:deprecation' << '-Xlint:unchecked'
}

group = 'edu.ucar.unidata'
version = '0.3.0-SNAPSHOT'

description = """rosetta"""

sourceCompatibility = 1.8
targetCompatibility = 1.8

ext {
  // needed for Jekyll
  // It makes sense to publish major.minor versions of the docs, as
  // any patch bumps should be backwards compatible bug fixes only
  // To do this, we need to make a special "doc version" string.
  // First, drop any dangling snapshot, alpha, beta tags
  cleanVersion = "$version".split('-')[0]

  // tokenize version on the '.' character, which gives us a list of [major, minor, patch]
  docVersionParts = cleanVersion.tokenize('.')

  // we should always have a major, minor, and patch value in our version
  assert docVersionParts.size == 3

  // keep major and minor parts of the version and use those to version the docs
  docVersion = docVersionParts[0] + '.' + docVersionParts[1]
}

dependencies {
  implementation enforcedPlatform('edu.ucar:netcdf-java-bom:5.5.3-SNAPSHOT')
  implementation enforcedPlatform('edu.ucar:netcdf-java-platform:5.5.3-SNAPSHOT')
  implementation enforcedPlatform('org.springframework:spring-framework-bom:5.3.19')
  implementation enforcedPlatform('org.springframework.security:spring-security-bom:5.6.3')
  implementation enforcedPlatform('com.fasterxml.jackson:jackson-bom:2.13.2.1')
  implementation enforcedPlatform('org.apache.logging.log4j:log4j-bom:2.17.2')

  // Spring Framework
  implementation 'org.springframework:spring-beans'
  implementation 'org.springframework:spring-context'
  implementation 'org.springframework:spring-core'
  implementation 'org.springframework:spring-expression'
  implementation 'org.springframework:spring-web'
  implementation 'org.springframework:spring-webmvc'
  implementation 'org.springframework:spring-jdbc'
  implementation 'org.springframework:spring-jcl' // logging bridge for spring

  // Spring Security
  implementation 'org.springframework.security:spring-security-web'
  implementation 'org.springframework.security:spring-security-config'
  implementation 'org.springframework.security:spring-security-taglibs'

  // netCDF-Java/CDM deps
  implementation 'edu.ucar:cdm-core'
  implementation 'edu.ucar:netcdf4'

  // handle intellij annotation warnings
  implementation group: 'com.intellij', name: 'annotations', version: '12.0'


  // JSON / xml processing
  implementation 'com.fasterxml.jackson.core:jackson-databind:2.13.2.1'
  implementation 'com.fasterxml.jackson.core:jackson-core:2.13.2.1'
  implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-xml:2.13.2.1'
  implementation 'com.googlecode.json-simple:json-simple:1.1.1'

  // takes the place of javax.activation package
  implementation 'com.sun.activation:javax.activation:1.2.0'

  implementation 'commons-codec:commons-codec:1.15'
  implementation 'commons-dbcp:commons-dbcp:2.9.0'
  implementation 'commons-fileupload:commons-fileupload:1.4'
  implementation 'commons-io:commons-io:2.11.0'

  implementation 'org.apache.commons:commons-lang3:3.12.0'
  implementation 'org.apache.commons:commons-text:1.9'

  implementation 'org.apache.httpcomponents:httpclient'
  implementation 'org.apache.derby:derby:10.15.2.0'

  implementation 'org.apache.taglibs:taglibs-standard-jstlel:1.2.5'

  implementation 'javax.servlet:javax.servlet-api:4.0.1'

  implementation 'javax.annotation:javax.annotation-api:1.3.2'


  // input validation
  implementation 'org.hibernate:hibernate-validator:7.0.4.Final'
  implementation 'javax.validation:validation-api:2.0.1.Final'

  implementation('net.sourceforge.jexcelapi:jxl:2.6.12') {
    exclude group: 'log4j', module: 'log4j'
  }

  // replace log4j 1.x with the log4j 1.2 bridge
  runtimeOnly 'org.apache.logging.log4j:log4j-1.2-api'

  // logging
  implementation 'org.apache.logging.log4j:log4j-api'
  runtimeOnly 'org.apache.logging.log4j:log4j-core'
  runtimeOnly 'org.apache.logging.log4j:log4j-web'
  // edu.ucar:httpservices uses uses Apache Commons Logging 1.x, so add the JCL bridge
  runtimeOnly "org.apache.logging.log4j:log4j-jcl"

  // Testing
  testImplementation 'de.bechte.junit:junit-hierarchicalcontextrunner:4.12.2'
  testImplementation 'junit:junit:4.13.2'
  testImplementation 'org.hamcrest:hamcrest-library:2.2'
  testImplementation 'org.hamcrest:hamcrest-core:2.2'
  testImplementation 'org.mockito:mockito-all:1.10.19'
  testImplementation 'org.mockito:mockito-core:4.5.1'
  testImplementation 'org.apache.httpcomponents:httpmime'

  // Spring Test
  testImplementation 'org.springframework:spring-test'
  testImplementation 'org.springframework.security:spring-security-test'
}

war {
  archiveFileName = 'rosetta.war'
  manifest {
    attributes 'Implementation-Version': project.version,
        'Implementation-Title': project.name,
        'Implementation-Vendor': 'UCAR/Unidata',
        'Implementation-Vendor-Id': project.group,
        'Built-On': new Date(),
        'Build-Jdk': JavaVersion.current()
  }
}

test {
  testLogging {
    events 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
  }

  useJUnit {
    excludeCategories 'edu.ucar.unidata.rosetta.util.test.category.NeedsLocalServer'
  }
}

dependencyCheck {
  data {
    directory="$rootDir/project-files/owasp-dependency-check/nvd"
  }
  scanConfigurations = ['compileClasspath', 'runtimeClasspath']
  suppressionFile = "$rootDir/project-files/owasp-dependency-check/dependency-check-suppression.xml"
  // fail the build if any vulnerable dependencies are identified (any CVSS score > 0).
  failBuildOnCVSS = 0
}

/////////////

sourceSets {
  integrationTests {
    java {
      compileClasspath += main.output + test.output
      runtimeClasspath += main.output + test.output
      srcDir file('src/test/java')
    }
    resources.srcDir file('src/test/resources')
  }
}

configurations {
  integrationTestsCompile.extendsFrom testImplementation
  integrationTestsRuntime.extendsFrom testRuntimeOnly
}

task integrationTests(type: Test) {

  description 'Runs tests that require a rosetta server running at localhost:8888.'

  testLogging {
    events 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
  }

  useJUnit {
    includeCategories 'edu.ucar.unidata.rosetta.util.test.category.NeedsLocalServer'
  }

  testClassesDirs = sourceSets.integrationTests.output.classesDirs
  classpath = sourceSets.integrationTests.runtimeClasspath
  outputs.upToDateWhen { false }
}

// allow servlet container to be configured by setting a system property
// default to tomcat 9.x.x
def servletContainerName = System.getProperty('tds.test.gretty.container')
if (servletContainerName == null || servletContainerName.isEmpty()) {
  servletContainerName = 'tomcat9'
}

gretty {
  servletContainer "$servletContainerName"
  httpPort = 8888

  // make sure to run as a war, otherwise WEB-INF/classes won't be picked up
  inplace = false

  contextPath = '/rosetta'

  jvmArgs = ["-Drosetta.content.root.path=$rootDir/src/test/rosetta_home"]

  integrationTestTask = 'integrationTests'

  configurations {
    grettyRunnerTomcat85 {
      exclude group: 'org.slf4j', module: 'log4j-over-slf4j'
    }
  }

  onStop {
    // cleans up ROSETTA_HOME, which is populated during the integration test process
    print 'Cleaning up test ROSETTA_HOME'
    File folder = new File("$rootDir/src/test/rosetta_home" as String)
    FileUtils.cleanDirectory(folder)
  }
}

wrapper {
  // to upgrade gradle, bump the version here and then run
  // ./gradlew wrapper
  distributionType = Wrapper.DistributionType.ALL
  gradleVersion = '6.9.1'
}

spotless {
  java {
    target '**/*.java'
    eclipse().configFile 'styles/eclipse-style-guide.xml'
    encoding 'UTF-8'
  }
}

//////////////////////////////////////////////// Nexus ////////////////////////////////////////////////

apply from: "$rootDir/gradle/any/properties.gradle"  // For Nexus credential properties.

import edu.ucar.build.publishing.tasks.PublishToRawRepoTask

tasks.withType(PublishToRawRepoTask).all {  // Common PublishToRawRepoTask config.
  group = 'Documentation'

  host = 'https://artifacts.unidata.ucar.edu/'
  repoName = 'docs-rosetta'

  onlyIf {
    // Will be evaluated at task execution time, not during configuration.
    // Fails the build if the specified properties haven't been provided.
    username = getPropertyOrFailBuild NEXUS_USERNAME_KEY
    password = getPropertyOrFailBuild NEXUS_PASSWORD_KEY
    return true
  }
}

tasks.register('publishAsVersionedUserGuide', PublishToRawRepoTask) {
  description = 'Publish user guide (versioned) to Nexus under /major.minor/.'

  publishSrc = buildJekyllSite.destinationDirectory.get()
  destPath = "$project.docVersion/userguide/"
  dependsOn tasks.getByName('buildJekyllSite')
}

tasks.register('publishAsCurrentUserGuide', PublishToRawRepoTask) {
  description = 'Publish the user guide to Nexus under /current/.'

  publishSrc = buildJekyllSite.destinationDirectory.get()
  destPath = 'current/userguide/'
  dependsOn tasks.getByName('buildJekyllSite')
}

// need to run test task before jacocoTestReport
jacocoTestReport.dependsOn test

check.dependsOn integrationTests
integrationTests.mustRunAfter test
