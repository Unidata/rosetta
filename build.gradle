apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'eclipse'
apply plugin: 'eclipse-wtp'
apply plugin: 'war'
apply plugin: 'jacoco'
apply plugin: 'com.github.jruby-gradle.base'
apply plugin: "com.diffplug.gradle.spotless"

// Adds 'assemble', 'check', 'build', and 'clean' tasks.
// See: https://docs.gradle.org/current/userguide/standard_plugins.html#sec:base_plugins
apply plugin: 'base'

apply plugin: 'com.github.jruby-gradle.base'
apply plugin: 'org.gretty'

import com.github.jrubygradle.JRubyExec
import org.apache.commons.io.FileUtils

compileJava {
    options.compilerArgs << '-Xlint:deprecation' << '-Xlint:unchecked'
}

group = 'edu.ucar.unidata'
version = '0.3-SNAPSHOT'

description = """rosetta"""

sourceCompatibility = 1.8
targetCompatibility = 1.8

ext {
    springVersion = "5.2.3.RELEASE"
    springSecurityVersion = "5.2.1.RELEASE"
    cdmVersion = "5.1.0"
    log4j2Version = "2.13.0"
    jacksonVersion = "2.10.0"

    // needed for Jekyll
    source = file("src/main/jekyll/").absolutePath
    destination = file("build/_site")
    sourceFiles = fileTree(source)
    commonFlags = ['--source', source, '--destination', destination]
}

dependencies {
    // format -> configurationName "group:name:version:classifier@extension"
    // Spring Framework
    compile "org.springframework:spring-beans:${springVersion}"
    compile "org.springframework:spring-context:${springVersion}"
    compile "org.springframework:spring-core:${springVersion}"
    compile "org.springframework:spring-expression:${springVersion}"
    compile "org.springframework:spring-web:${springVersion}"
    compile "org.springframework:spring-webmvc:${springVersion}"
    compile "org.springframework:spring-jdbc:${springVersion}"
    compile "org.springframework:spring-jcl:${springVersion}" // logging bridge for spring
    
    // Spring Security
    compile "org.springframework.security:spring-security-web:${springSecurityVersion}"
    compile "org.springframework.security:spring-security-config:${springSecurityVersion}"
    compile "org.springframework.security:spring-security-taglibs:${springSecurityVersion}"

    // Spring Test
    testCompile "org.springframework:spring-test:${springVersion}"
    testCompile "org.springframework.security:spring-security-test:${springSecurityVersion}"

    // netCDF-Java/CDM deps
    compile "edu.ucar:cdm:${cdmVersion}"
    compile "edu.ucar:netcdf4:${cdmVersion}"

    // logging
    compile "org.apache.logging.log4j:log4j-api:${log4j2Version}"
    runtime "org.apache.logging.log4j:log4j-core:${log4j2Version}"
    runtime "org.apache.logging.log4j:log4j-web:${log4j2Version}"
    // edu.ucar:httpservices uses uses Apache Commons Logging 1.x, so add the JCL bridge
    runtime "org.apache.logging.log4j:log4j-jcl:${log4j2Version}"

    // JSON / xml processing
    compile "com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}"
    compile "com.fasterxml.jackson.core:jackson-core:${jacksonVersion}"
    compile "com.fasterxml.jackson.dataformat:jackson-dataformat-xml:${jacksonVersion}"
    compile "com.googlecode.json-simple:json-simple:1.1.1"

    // takes the place of javax.activation package
    compile 'com.sun.activation:javax.activation:1.2.0'

    compile "commons-codec:commons-codec:1.11"
    compile "commons-dbcp:commons-dbcp:1.4"
    compile "commons-fileupload:commons-fileupload:1.3.3"
    compile "commons-io:commons-io:2.6"

    compile "org.apache.commons:commons-lang3:3.4"
    compile "org.apache.commons:commons-text:1.3"

    compile "org.apache.httpcomponents:httpclient:4.3.6"
    compile "org.apache.derby:derby:10.14.2.0"

    compile "org.apache.taglibs:taglibs-standard-jstlel:1.2.5"

    compile "javax.servlet:javax.servlet-api:3.1.0"

    compile 'javax.annotation:javax.annotation-api:1.3.2'

    // input validation
    compile "org.hibernate:hibernate-validator:6.0.9.Final"
    compile "javax.validation:validation-api:2.0.1.Final"

    compile "net.sourceforge.jexcelapi:jxl:2.6.12"

    // Testing
    testCompile "de.bechte.junit:junit-hierarchicalcontextrunner:4.12.1"
    testCompile "junit:junit:4.12"
    testCompile "org.hamcrest:hamcrest-library:1.3"
    testCompile "org.hamcrest:hamcrest-core:1.3"
    testCompile "org.mockito:mockito-all:1.10.19"
    testCompile "org.mockito:mockito-core:2.18.3"

    // Doc build
    jrubyExec 'rubygems:jekyll:3.8.6'
    // Without this, we get: LoadError: no such file to load -- bundler
    jrubyExec 'rubygems:bundler:2.0.2'
}

war {
    archiveFileName = 'rosetta.war'
    manifest {
        attributes 'Implementation-Version': project.version,
                'Implementation-Title': project.name,
                'Implementation-Vendor': 'UCAR/Unidata',
                'Implementation-Vendor-Id': project.group,
                'Built-On': new Date(),
                'Build-Jdk': JavaVersion.current()
    }
}

test {
    testLogging {
        events "passed", "skipped", "failed", "standardOut", "standardError"
    }

    useJUnit {
        excludeCategories 'edu.ucar.unidata.rosetta.util.test.category.NeedsLocalServer'
    }
}

/////////////

repositories {
    maven {
        url "https://artifacts.unidata.ucar.edu/repository/unidata-all/"
    }
}

buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath "com.github.jruby-gradle:jruby-gradle-plugin:1.7.0"
        classpath "org.gretty:gretty:+"
        classpath "com.diffplug.spotless:spotless-plugin-gradle:3.22.0"
    }
}


task buildUserGuide(type: JRubyExec, group: 'Jekyll', description: 'Build your site.') {

    // sourceFiles, destination defined in ext
    inputs.files(sourceFiles)
    outputs.dir(destination)

    script "jekyll"

    scriptArgs "build"
    scriptArgs commonFlags

    // Consider enabling this to help us determine when pages need to be pushed to Nexus.
    // A copy of .jekyll-metadata could be stored in the repo and then compared to the local file.
    // See https://jekyllrb.com/docs/configuration/#incremental-regeneration
    // scriptArgs "--incremental"
}

task serveUserGuide(type: JRubyExec, group: 'Jekyll', description: 'Serve your site locally.') {
    // This task starts a server; it is never considered UP-TO-DATE.
    outputs.upToDateWhen { false }

    script "jekyll"

    scriptArgs "serve"
    scriptArgs commonFlags
}

sourceSets {
    integrationTests {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/test/java')
        }
        resources.srcDir file('src/test/resources')
    }
}

configurations {
    integrationTestsCompile.extendsFrom testCompile
    integrationTestsRuntime.extendsFrom testRuntime
}

task integrationTests(type: Test) {

    description 'Runs tests that require a rosetta server running at localhost:8888.'

    testLogging {
        events "passed", "skipped", "failed", "standardOut", "standardError"
    }

    useJUnit {
        includeCategories 'edu.ucar.unidata.rosetta.util.test.category.NeedsLocalServer'
    }

    testClassesDirs = sourceSets.integrationTests.output.classesDirs
    classpath = sourceSets.integrationTests.runtimeClasspath
    outputs.upToDateWhen { false }
}

gretty {
    servletContainer = 'tomcat85'
    httpPort = 8888

    // make sure to run as a war, otherwise WEB-INF/classes won't be picked up
    inplace = false

    contextPath = '/rosetta'

    jvmArgs = ["-Drosetta.content.root.path=$rootDir/src/test/rosetta_home"]

    integrationTestTask = 'integrationTests'

    configurations {
        grettyRunnerTomcat85 {
            exclude group: 'org.slf4j', module: 'log4j-over-slf4j'
        }
    }

    onStop {
        // cleans up ROSETTA_HOME, which is populated during the integration test process
        print "Cleaning up test ROSETTA_HOME"
        File folder = new File("$rootDir/src/test/rosetta_home" as String)
        FileUtils.cleanDirectory(folder)
    }
}

wrapper {
    // to upgrade gradle, bump the version here and then run
    // ./gradlew wrapper
    gradleVersion = '5.6'
}

spotless {
    java {
        target '**/*.java'
        eclipse().configFile 'styles/eclipse-style-guide.xml'
        encoding 'UTF-8'
    }
}

// need to run test task before jacocoTestReport
jacocoTestReport.dependsOn test

check.dependsOn integrationTests
integrationTests.mustRunAfter test
