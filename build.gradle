apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'eclipse'
apply plugin: 'eclipse-wtp'
apply plugin: 'war'
apply plugin: 'org.sonarqube'
apply plugin: 'jacoco'
apply plugin: 'com.github.jruby-gradle.base'

// Adds 'assemble', 'check', 'build', and 'clean' tasks.
// See: https://docs.gradle.org/current/userguide/standard_plugins.html#sec:base_plugins
apply plugin: 'base'

apply plugin: 'com.github.jruby-gradle.base'
apply plugin: 'org.gretty'

import org.apache.commons.io.FileUtils
import com.github.jrubygradle.JRubyExec

compileJava {
    options.compilerArgs << '-Xlint:deprecation' << '-Xlint:unchecked'
}

group = 'edu.ucar.unidata'
version = '0.3-SNAPSHOT'

description = """rosetta"""

sourceCompatibility = 1.8
targetCompatibility = 1.8

ext {
    springVersion = "4.3.13.RELEASE"
    springSecurityVersion = "4.2.3.RELEASE"
    cdmVersion = "4.6.11"

    source = file("src/main/jekyll/").absolutePath
    destination = file("build/_site").absolutePath

    commonFlags = [ '--source', source, '--destination', destination ]
}

dependencies {
    // format -> configurationName "group:name:version:classifier@extension"
    // Spring Framework
    compile "org.springframework:spring-beans:$springVersion"
    compile "org.springframework:spring-context:$springVersion"
    compile "org.springframework:spring-core:$springVersion"
    compile "org.springframework:spring-expression:$springVersion"
    compile "org.springframework:spring-web:$springVersion"
    compile "org.springframework:spring-webmvc:$springVersion"

    // Spring Security
    compile "org.springframework.security:spring-security-web:$springSecurityVersion"
    compile "org.springframework.security:spring-security-config:$springSecurityVersion"
    compile "org.springframework.security:spring-security-taglibs:$springSecurityVersion"

    // Spring Test
    testCompile "org.springframework:spring-test:$springVersion"
    testCompile "org.springframework.security:spring-security-test:$springSecurityVersion"

    // netCDF-Java/CDM deps
    compile "edu.ucar:netcdfAll:$cdmVersion"

    // others
    compile "org.slf4j:slf4j-log4j12:1.7.25"
    compile "org.slf4j:slf4j-api:1.7.25"
    compile "org.slf4j:jcl-over-slf4j:1.7.25"

    // JSON processing
    compile "com.fasterxml.jackson.core:jackson-databind:2.9.4"
    compile "com.fasterxml.jackson.core:jackson-core:2.9.5";

    // takes the place of javax.activation package
    compile 'com.sun.activation:javax.activation:1.2.0'

    compile "commons-codec:commons-codec:1.11"
    compile "commons-dbcp:commons-dbcp:1.4"
    compile "commons-fileupload:commons-fileupload:1.3.3"
    compile "commons-io:commons-io:2.6"

    compile "org.apache.commons:commons-lang3:3.4"
    compile "org.apache.commons:commons-text:1.3"

    compile "org.apache.httpcomponents:httpclient:4.3.6"
    compile "org.apache.derby:derby:10.14.2.0"

    compile "jstl:jstl:1.2"

    compile "log4j:log4j:1.2.17"

    compile "javax.servlet:javax.servlet-api:3.1.0"

    compile 'javax.annotation:javax.annotation-api:1.3.2'

    // input validation
    compile "org.hibernate:hibernate-validator:6.0.9.Final"
    compile "javax.validation:validation-api:2.0.1.Final"

    compile "net.sourceforge.jexcelapi:jxl:2.6.12"

    compile "com.googlecode.json-simple:json-simple:1.1.1"

    compile "org.codehaus.jackson:jackson-mapper-asl:1.5.3"

    // Testing
    testCompile "de.bechte.junit:junit-hierarchicalcontextrunner:4.12.1"
    testCompile "junit:junit:4.12"
    testCompile "org.hamcrest:hamcrest-library:1.3"
    testCompile "org.hamcrest:hamcrest-core:1.3"
    testCompile "org.mockito:mockito-all:1.10.19"
    testCompile "org.mockito:mockito-core:2.18.3"

    jrubyExec 'rubygems:jekyll:3.4.0'
    // Without this, we get: LoadError: no such file to load -- bundler
    jrubyExec 'rubygems:bundler:1.14.4'
}

war {
    extension = "war"
    archiveName = 'rosetta.war'
    manifest {
        attributes 'Implementation-Version': project.version,
                'Implementation-Title': project.name,
                'Implementation-Vendor': 'UCAR/Unidata',
                'Implementation-Vendor-Id': project.group,
                'Built-On': new Date(),
                'Build-Jdk': JavaVersion.current()
    }
}

ext {
    source = file("src/main/jekyll/").absolutePath
    destination = file("build/_site").absolutePath

    commonFlags = [ '--source', source, '--destination', destination ]
}

test {
    testLogging {
        events "passed", "skipped", "failed", "standardOut", "standardError"
    }

    //useJUnit {
    //    excludeCategories 'edu.ucar.unidata.rosetta.util.test.category.NeedsLocalServer'
    //}
}

/////////////

repositories {
    maven {
        url "https://artifacts.unidata.ucar.edu/repository/unidata-releases/"
    }
}

buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath "com.github.jruby-gradle:jruby-gradle-plugin:1.5.0"
        classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.6.1"
        classpath 'org.gretty:gretty:+'
    }
}


task jekyllBuild(type: JRubyExec, group: 'Jekyll', description: 'Build your site.') {
    // Enable task to be UP-TO-DATE.
    inputs.file source
    outputs.file destination

    script "jekyll"

    scriptArgs "build"
    scriptArgs commonFlags

    // Consider enabling this to help us determine when pages need to be pushed to Nexus.
    // A copy of .jekyll-metadata could be stored in the repo and then compared to the local file.
    // See https://jekyllrb.com/docs/configuration/#incremental-regeneration
    // scriptArgs "--incremental"
}

tasks.assemble.dependsOn tasks.jekyllBuild

task jekyllServe(type: JRubyExec, group: 'Jekyll', description: 'Serve your site locally.') {
    // This task starts a server; it is never considered UP-TO-DATE.
    outputs.upToDateWhen { false }

    script "jekyll"

    scriptArgs "serve"
    scriptArgs commonFlags
}

sourceSets {
    integrationTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/test/java')
        }
        resources.srcDir file('src/test/resources')
    }
}

configurations {
    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime
}

task integrationTest(type: Test) {

    useJUnit {
        includeCategories 'edu.ucar.unidata.rosetta.util.test.category.NeedsLocalServer'
    }

    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
    outputs.upToDateWhen { false }
}

task testsNeedLocalServer(type: Test) {
    failFast =  false

    //testClassesDirs = sourceSets.localServerTests.output.classesDirs
    //classpath = sourceSets.localServerTests.runtimeClasspath
    outputs.upToDateWhen { false }

    useJUnit {
        includeCategories 'edu.ucar.unidata.rosetta.util.test.category.NeedsLocalServer'
    }

    testLogging {
        showStandardStreams = true
    }

    doLast {
        print "Cleaning up"
        File folder = new File("$rootDir/src/test/rosetta_home")
        FileUtils.cleanDirectory(folder)
    }
}

gretty {
    servletContainer = 'tomcat8'
    httpPort = 8888

    // make sure to run as a war, otherwise WEB-INF/classes won't be picked up
    inplace = false

    contextPath = '/rosetta'

    jvmArgs = ["-Drosetta.content.root.path=$rootDir/src/test/rosetta_home",
               "-Dlog4j.configuration=$rootDir/src/main/webapp/WEB-INF/classes/log4j.xml"]

    integrationTestTask = 'integrationTest'

    configurations {
        grettyRunnerTomcat8 {
            exclude group: 'org.slf4j', module: 'log4j-over-slf4j'
        }
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '4.9'
}

// run coverage with jacoco before sonarqube analysis so that coverabe report
// will be ready for sonarqube submission
project.tasks["sonarqube"].dependsOn jacocoTestReport

// need to run test task before jacocoTestReport
jacocoTestReport.dependsOn test

check.dependsOn integrationTest
integrationTest.mustRunAfter test